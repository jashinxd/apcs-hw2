5/18/15
-- HASHING/HASH TABLES --
You want to store all info on Stuy students in a data structure
You want to optimize for...
1. Finding a student based on 4 digit ID
2. Adding a student by 4 digit ID
3. Changing a student (found by 4 digit ID)

You can use an Array with the ID numbers as the index
However, we would be using 10k slots for 3k students. This is not too much space
wasted. However, if we used OSIS number, we would have to make an array of 1
billion for 3k students
We can do even better by cutting down the array to a size of 4000. Just adjust
the IDs such that it fits into the array. Ex) 2792 - 1000 = index
You can do this with OSIS numbers by taking the last four numbers in the number

Hashing
- We want to store things in a table by index (Array).
- We have to take a unique ID and convert it into a table index to store it.
- Hash function h(x) is a mapping function
  * It takes a piece of information and converts it into an index in our hash
    table.
    * EX) OSIS numbers:
          h(x) = x % 10000 <-- converts to a 4 digit index
          h(x) = multiply all non-zero digits of x % 10000
- PROBLEM -- Multiple objects can hash to the same slot/index
          -- Clash/collision
    * Hash table array has to be sufficiently large (Sparsely populated)
    * Hash function should do a good job distributing items in the table


5/19/15
Example of a hash function:

  int hash (String s) {
      h = 1;
      for (i = 0 to s.length()) {
  	  h = h * 11 + int(s.charAt(i));
      }
      return h % tablesize;
  }

Styles of Hashing:
  1.Closed Hashing:
    * Everything is stored in the array
    * Collision 
      --> Rehashing - Run the hash function again
      --> Linear Probing - Store the data in the next index
      --> Leave space in the table using a multiplier
          EX) h(x) = (x % 100) * 3 --> leaves space for Linear Probing
    --Runtime of Closed Hashing--
      * Insert - Expected O(i)
      * Retrieval - Expected O(i)
      * Doesn't allow for retrieval of largest/smallest element

  2.Open Hashing;
    * Each array element is a pointer to a linked list of values that hash to 
      that element.
      * Insert - Always O(1)
      * Retrieval - Expected O(1)
        --> O(n) with respect to the length n of the linked list at the correct
            position

		    

