import java.io.*;
import java.util.*;

public class mergesort {
    private int[] randNums;
    private int listLen;
    private int greatestInt;
    
    public mergesort(int listLength, int greatestInteger) {
	Random r = new Random();
	listLen = listLength;
	greatestInt = greatestInteger;
	randNums = new int[listLen];
	for (int i = 0; i < listLen; i++) {
	    randNums[i] = r.nextInt(greatestInt));
	}
    }

    public ArrayList<Integer> merge(int[] a, int[] b){
	int[] sorted = new int[a.length + b.length];
	int iA = 0;
	int iB = 0;
	int iSorted = 0;
	while (iA < a.length || iB < b.length) {
	    if (iB == b.length && iA < a.length) {
		sorted[iSorted] = a[iA];
		iA++;
	    } else if (iA == a.length && iB < b.length) {
		sorted[iSorted] = b[iB];
		iB++;
	    } else if (a[iA] <= b[iB]) {
		sorted[iSorted] = a[iA]);
		iA++;
	    } else if (b[iB] <= a[iA]) {
		sorted[iSorted] = b[iB]);
		iB++;
	    }
	    iSorted++;
	}
	return sorted;
    }

    public ArrayList<Integer> msort(ArrayList<Integer> a) {
	//ArrayList<Integer> sorted = new ArrayList<Integer>();
	int[] half1 = new int[a.length / 2];
	int[] half2 = new int[a.length - (a.length / 2)];
	if (a.length <= 1) {
	    return a;
	} else {
	    for (int i = 0; i < a.size(); i++) {
		if (i < a.size() / 2) {
		    half1.add(a.get(i));
		} else {
		    half2.add(a.get(i));
		}
	    }
	    ArrayList<Integer> r1 = msort(half1);
	    ArrayList<Integer> r2 = msort(half2);
	    return merge(r1, r2);
	}
    }	

    public ArrayList<Integer> msortspeed() {
	return msort(randNums);
    }
	    
    public static void main(String[] args) {
	mergesort m = new mergesort();
	// -- Testing merge function --
	ArrayList<Integer> test1 = new ArrayList<Integer>();
	ArrayList<Integer> test2 = new ArrayList<Integer>();
	for (int i = 0; i < 5; i++) {
	    test1.add(i);
	    test2.add(i);
	}
	test1.add(7);
	test1.add(9);
	test2.add(5);
	test2.add(6);
	System.out.println("List 1: " + test1);
	System.out.println("List 2: " + test2);
	System.out.println("After merging L1 and L2: " + m.merge(test1, test2));
	// -- Testing msort funstion --
	ArrayList<Integer> randNums = new ArrayList<Integer>();
	for (int i = 0; i < 20; i++) {
	    Random r = new Random();
	    randNums.add(r.nextInt(10));
	}
	System.out.println("Before msort: " + randNums);
	System.out.println("After msort: " + m.msort(randNums));
    }
}
